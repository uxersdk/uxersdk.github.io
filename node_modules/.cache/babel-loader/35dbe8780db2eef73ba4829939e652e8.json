{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _jump = require('jump.js');\n\nvar _jump2 = _interopRequireDefault(_jump);\n\nvar _func = require('./utils/func');\n\nvar _scroll = require('./utils/scroll');\n\nvar _hash = require('./utils/hash');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar defaultConfig = {\n  offset: 0,\n  scrollDuration: 400,\n  keepLastAnchorHash: false\n};\n\nvar Manager = function Manager() {\n  var _this = this;\n\n  _classCallCheck(this, Manager);\n\n  this.addListeners = function () {\n    window.addEventListener('scroll', _this.scrollHandler, false);\n    window.addEventListener('hashchange', _this.handleHashChange);\n  };\n\n  this.removeListeners = function () {\n    window.removeEventListener('scroll', _this.scrollHandler, false);\n    window.removeEventListener('hashchange', _this.handleHashChange);\n  };\n\n  this.configure = function (config) {\n    _this.config = _extends({}, defaultConfig, config);\n  };\n\n  this.goToTop = function () {\n    if ((0, _scroll.getScrollTop)() === 0) return;\n    _this.forcedHash = true;\n    window.scroll(0, 0);\n  };\n\n  this.addAnchor = function (id, component) {\n    // if this is the first anchor, set up listeners\n    if (Object.keys(_this.anchors).length === 0) {\n      _this.addListeners();\n    }\n\n    _this.forceHashUpdate();\n\n    _this.anchors[id] = component;\n  };\n\n  this.removeAnchor = function (id) {\n    delete _this.anchors[id]; // if this is the last anchor, remove listeners\n\n    if (Object.keys(_this.anchors).length === 0) {\n      _this.removeListeners();\n    }\n  };\n\n  this.handleScroll = function () {\n    var _config = _this.config,\n        offset = _config.offset,\n        keepLastAnchorHash = _config.keepLastAnchorHash;\n    var bestAnchorId = (0, _scroll.getBestAnchorGivenScrollLocation)(_this.anchors, offset);\n\n    if (bestAnchorId && (0, _hash.getHash)() !== bestAnchorId) {\n      _this.forcedHash = true;\n      (0, _hash.updateHash)(bestAnchorId, false);\n    } else if (!bestAnchorId && !keepLastAnchorHash) {\n      (0, _hash.removeHash)();\n    }\n  };\n\n  this.handleHashChange = function (e) {\n    if (_this.forcedHash) {\n      _this.forcedHash = false;\n    } else {\n      _this.goToSection((0, _hash.getHash)());\n    }\n  };\n\n  this.goToSection = function (id) {\n    var element = _this.anchors[id];\n\n    if (element) {\n      (0, _jump2.default)(element, {\n        duration: _this.config.scrollDuration,\n        offset: _this.config.offset\n      });\n    } else {\n      // make sure that standard hash anchors don't break.\n      // simply jump to them.\n      element = document.getElementById(id);\n\n      if (element) {\n        (0, _jump2.default)(element, {\n          duration: 0,\n          offset: _this.config.offset\n        });\n      }\n    }\n  };\n\n  this.anchors = {};\n  this.forcedHash = false;\n  this.config = defaultConfig;\n  this.scrollHandler = (0, _func.debounce)(this.handleScroll, 100);\n  this.forceHashUpdate = (0, _func.debounce)(this.handleHashChange, 1);\n};\n\nexports.default = new Manager();","map":null,"metadata":{},"sourceType":"script"}