{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar getScrollTop = exports.getScrollTop = function getScrollTop() {\n  return document.body.scrollTop || document.documentElement.scrollTop;\n}; // get vertical offsets of element, taking scrollTop into consideration\n\n\nvar getElementOffset = exports.getElementOffset = function getElementOffset(element) {\n  var scrollTop = getScrollTop();\n\n  var _element$getBoundingC = element.getBoundingClientRect(),\n      top = _element$getBoundingC.top,\n      bottom = _element$getBoundingC.bottom;\n\n  return {\n    top: Math.floor(top + scrollTop),\n    bottom: Math.floor(bottom + scrollTop)\n  };\n}; // does scrollTop live within element bounds?\n\n\nvar doesElementContainScrollTop = exports.doesElementContainScrollTop = function doesElementContainScrollTop(element) {\n  var extraOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var scrollTop = getScrollTop();\n  var offsetTop = getElementOffset(element).top + extraOffset;\n  return scrollTop >= offsetTop && scrollTop < offsetTop + element.offsetHeight;\n}; // is el2's location more relevant than el2,\n// parent-child relationship aside?\n\n\nvar checkLocationRelevance = exports.checkLocationRelevance = function checkLocationRelevance(el1, el2) {\n  var _getElementOffset = getElementOffset(el1),\n      top1 = _getElementOffset.top,\n      bottom1 = _getElementOffset.bottom;\n\n  var _getElementOffset2 = getElementOffset(el2),\n      top2 = _getElementOffset2.top,\n      bottom2 = _getElementOffset2.bottom;\n\n  if (top1 === top2) {\n    if (bottom1 === bottom2) {\n      // top and bottom of compared elements are the same,\n      // so return one randomly in a deterministic way\n      return el1 < el2;\n    } // top of compared elements is the same, so return whichever\n    // element has its bottom higher on the page\n\n\n    return bottom2 < bottom1;\n  } // top of compared elements differ, so return true\n  // if tested element has its top lower on the page\n\n\n  return top2 > top1;\n}; // check if el2 is more relevant than el1, considering child-parent\n// relationships as well as node location.\n\n\nvar checkElementRelevance = exports.checkElementRelevance = function checkElementRelevance(el1, el2) {\n  if (el1.contains(el2)) {\n    // el2 is child, so it gains relevance priority\n    return true;\n  } else if (!el2.contains(el1) && checkLocationRelevance(el1, el2)) {\n    // el1 and el2 are unrelated, but el2 has a better location,\n    // so it gains relevance priority\n    return true;\n  }\n\n  return false;\n}; // given a set of anchors, find which one is, given the following logic:\n// 1. children nodes are more relevant than parent nodes\n// 2. if neither node contains the other, and their top locations differ,\n//    the node with the top lower on the page is more relevant\n// 3. if neither node contains the other, and their top locations are the same,\n//    the node with the bottom higher on the page is more relevant\n// 4. if neither node contains the other, and their top and bottom locations\n//    are the same, a node is chosen at random, in a deterministic way,\n//    to be more relevant.\n\n\nvar getBestAnchorGivenScrollLocation = exports.getBestAnchorGivenScrollLocation = function getBestAnchorGivenScrollLocation(anchors, offset) {\n  var bestId = void 0,\n      bestElement = void 0;\n  Object.keys(anchors).forEach(function (id) {\n    var element = anchors[id];\n\n    if (doesElementContainScrollTop(element, offset)) {\n      if (!bestElement || checkElementRelevance(bestElement, element)) {\n        bestElement = element;\n        bestId = id;\n      }\n    }\n  });\n  return bestId;\n};","map":null,"metadata":{},"sourceType":"script"}